{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js\";\nimport React from 'react';\nimport { ActionCable } from 'react-actioncable-provider';\nimport { API_ROOT } from './constants/index';\nimport NewChatroomForm from './NewChatroomForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport axios from 'axios';\n\nclass ChatroomsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatrooms: [this.props.chatroom],\n      activeChatroom: this.props.chatroom\n    };\n\n    this.componentDidMount = () => {\n      console.log('mounted', this.props);\n      axios.get(`${API_ROOT}/chatrooms`).then(res => {\n        console.log('res', res); // res\n      }).then(chatrooms => {\n        console.log(chatrooms);\n        this.setState({\n          chatrooms\n        });\n      });\n    };\n\n    this.handleClick = id => {\n      this.setState({\n        activeChatroom: id\n      });\n    };\n\n    this.handleReceivedChatroom = response => {\n      const {\n        chatroom\n      } = response;\n      this.setState({\n        chatrooms: [...this.state.chatrooms, chatroom]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      const {\n        message\n      } = response;\n      const chatrooms = [...this.state.chatrooms];\n      const chatroom = chatrooms.find(chatroom => chatroom.id === message.chatroom_id);\n      chatroom.messages = [...chatroom.messages, message];\n      this.setState({\n        chatrooms\n      });\n    };\n\n    this.render = () => {\n      const {\n        chatrooms,\n        activeChatroom\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ChatroomsList\",\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: activeChatroom.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default ChatroomsList; // helpers\n\nconst findActiveChatroom = (chatrooms, activeChatroom) => {\n  return chatrooms.find(chatroom => chatroom.id === activeChatroom);\n};\n\nconst mapchatrooms = (chatrooms, handleClick) => {\n  return chatrooms.map(chatroom => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => handleClick(chatroom.id),\n      children: chatroom.name\n    }, chatroom.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this);\n  });\n};","map":{"version":3,"sources":["/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCable","API_ROOT","NewChatroomForm","MessagesArea","Cable","axios","ChatroomsList","Component","state","chatrooms","props","chatroom","activeChatroom","componentDidMount","console","log","get","then","res","setState","handleClick","id","handleReceivedChatroom","response","handleReceivedMessage","message","find","chatroom_id","messages","render","name","findActiveChatroom","mapchatrooms","map"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ActionCable } from 'react-actioncable-provider';\r\nimport { API_ROOT } from './constants/index';\r\nimport NewChatroomForm from './NewChatroomForm';\r\nimport MessagesArea from './MessagesArea';\r\nimport Cable from './Cable';\r\nimport axios from 'axios';\r\n\r\nclass ChatroomsList extends React.Component {\r\n  state = {\r\n    chatrooms: [this.props.chatroom],\r\n    activeChatroom: this.props.chatroom\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    console.log('mounted', this.props);\r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => {\r\n        console.log('res', res); \r\n        // res\r\n      })\r\n      .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n  };\r\n\r\n  handleClick = id => {\r\n    this.setState({ activeChatroom: id });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    const { message } = response;\r\n    const chatrooms = [...this.state.chatrooms];\r\n    const chatroom = chatrooms.find(\r\n      chatroom => chatroom.id === message.chatroom_id\r\n    );\r\n    chatroom.messages = [...chatroom.messages, message];\r\n    this.setState({ chatrooms });\r\n  };\r\n\r\n  render = () => {\r\n    const { chatrooms, activeChatroom } = this.state;\r\n    return (\r\n      <div className=\"ChatroomsList\">\r\n        <h1>{activeChatroom.name}</h1>\r\n        {/* <ActionCable\r\n          channel={{ channel: 'ChatroomsChannel' }}\r\n          onReceived={this.handleReceivedChatroom}\r\n        />\r\n        {this.state.chatrooms.length ? (\r\n          <Cable\r\n            chatrooms={chatrooms}\r\n            handleReceivedMessage={this.handleReceivedMessage}\r\n          />\r\n        ) : null}\r\n        <h2>Chatrooms</h2>\r\n        <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\r\n        <NewChatroomForm />\r\n        {activeChatroom ? (\r\n          <MessagesArea\r\n            chatroom={findActiveChatroom(\r\n              chatrooms,\r\n              activeChatroom\r\n            )}\r\n          />\r\n        ) : null} */}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomsList;\r\n\r\n// helpers\r\n\r\nconst findActiveChatroom = (chatrooms, activeChatroom) => {\r\n  return chatrooms.find(\r\n    chatroom => chatroom.id === activeChatroom\r\n  );\r\n};\r\n\r\nconst mapchatrooms = (chatrooms, handleClick) => {\r\n  return chatrooms.map(chatroom => {\r\n    return (\r\n      <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n        {chatroom.name}\r\n      </li>\r\n    );\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}