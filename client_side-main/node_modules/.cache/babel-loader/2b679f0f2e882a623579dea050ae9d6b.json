{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js\";\nimport React from 'react';\nimport { ActionCable } from 'react-actioncable-provider';\nimport { API_ROOT } from './constants/index';\nimport NewChatroomForm from './NewChatroomForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport axios from 'axios';\n\nclass ChatroomsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatrooms: [],\n      activeChatroom: this.props.chatroom\n    };\n\n    this.componentDidMount = () => {\n      console.log('mounted', this.props);\n      axios.get(`${API_ROOT}/chatrooms`).then(res => {\n        console.log('res', res);\n        this.setState({\n          chatrooms: res.data,\n          loadingState: 'Loaded'\n        }); // res\n      }); // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\n    };\n\n    this.handleClick = id => {\n      this.setState({\n        activeChatroom: id\n      });\n    };\n\n    this.handleReceivedChatroom = response => {\n      const {\n        chatroom\n      } = response;\n      this.setState({\n        chatrooms: [...this.state.chatrooms, chatroom]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      const {\n        message\n      } = response;\n      const chatrooms = [...this.state.chatrooms];\n      const chatroom = chatrooms.find(chatroom => chatroom.id === message.chatroom_id);\n      chatroom.messages = [...chatroom.messages, message];\n      this.setState({\n        chatrooms\n      });\n    };\n\n    this.render = () => {\n      const {\n        chatrooms,\n        activeChatroom\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ChatroomsList\",\n        children: chatrooms && chatrooms.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Chatrooms\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: mapchatrooms(chatrooms, this.handleClick)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(NewChatroomForm, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 11\n          }, this), activeChatroom ? /*#__PURE__*/_jsxDEV(MessagesArea, {\n            chatroom: findActiveChatroom(chatrooms, activeChatroom)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this) : 'No Chats were found'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default ChatroomsList; // helpers\n\nconst findActiveChatroom = (chatrooms, activeChatroom) => {\n  console.log('chatrooms', chatrooms);\n  return chatrooms.find(chatroom => chatroom.id === activeChatroom);\n};\n\nconst mapchatrooms = (chatrooms, handleClick) => {\n  return chatrooms.map(chatroom => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => handleClick(chatroom.id),\n      children: chatroom.name\n    }, chatroom.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  });\n};","map":{"version":3,"sources":["/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCable","API_ROOT","NewChatroomForm","MessagesArea","Cable","axios","ChatroomsList","Component","state","chatrooms","activeChatroom","props","chatroom","componentDidMount","console","log","get","then","res","setState","data","loadingState","handleClick","id","handleReceivedChatroom","response","handleReceivedMessage","message","find","chatroom_id","messages","render","length","mapchatrooms","findActiveChatroom","map","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ActionCable } from 'react-actioncable-provider';\r\nimport { API_ROOT } from './constants/index';\r\nimport NewChatroomForm from './NewChatroomForm';\r\nimport MessagesArea from './MessagesArea';\r\nimport Cable from './Cable';\r\nimport axios from 'axios';\r\n\r\nclass ChatroomsList extends React.Component {\r\n  state = {\r\n    chatrooms: [],\r\n    activeChatroom: this.props.chatroom\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    console.log('mounted', this.props);\r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => {\r\n        console.log('res', res); \r\n        this.setState({chatrooms: res.data, loadingState: 'Loaded' })\r\n        // res\r\n      })\r\n      // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n  };\r\n\r\n  handleClick = id => {\r\n    this.setState({ activeChatroom: id });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    const { message } = response;\r\n    const chatrooms = [...this.state.chatrooms];\r\n    const chatroom = chatrooms.find(\r\n      chatroom => chatroom.id === message.chatroom_id\r\n    );\r\n    chatroom.messages = [...chatroom.messages, message];\r\n    this.setState({ chatrooms });\r\n  };\r\n\r\n  render = () => {\r\n    const { chatrooms, activeChatroom } = this.state;\r\n    return (\r\n      <div className=\"ChatroomsList\">\r\n        {/* <h1>{activeChatroom.name}</h1> */}\r\n        {chatrooms && chatrooms.length > 0 ?\r\n        <div>\r\n          {/* <ActionCable\r\n            channel={{ channel: 'ChatroomsChannel' }}\r\n            onReceived={this.handleReceivedChatroom}\r\n          /> */}\r\n          {/* {this.state.chatrooms.length ? (\r\n            <Cable\r\n              chatrooms={chatrooms}\r\n              handleReceivedMessage={this.handleReceivedMessage}\r\n            />\r\n          ) : null} */}\r\n          <h2>Chatrooms</h2>\r\n          <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\r\n          <NewChatroomForm />\r\n          {activeChatroom ? (\r\n            <MessagesArea\r\n              chatroom={findActiveChatroom(\r\n                chatrooms,\r\n                activeChatroom\r\n              )}\r\n            />\r\n          ) : null}\r\n          </div>\r\n          : 'No Chats were found'}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomsList;\r\n\r\n// helpers\r\n\r\nconst findActiveChatroom = (chatrooms, activeChatroom) => {\r\n  console.log('chatrooms', chatrooms)\r\n  return chatrooms.find(\r\n    chatroom => chatroom.id === activeChatroom\r\n  );\r\n};\r\n\r\nconst mapchatrooms = (chatrooms, handleClick) => {\r\n  return chatrooms.map(chatroom => {\r\n    return (\r\n      <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n        {chatroom.name}\r\n      </li>\r\n    );\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}