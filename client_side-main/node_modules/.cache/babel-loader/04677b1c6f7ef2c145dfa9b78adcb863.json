{"ast":null,"code":"import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _slicedToArray from\"/Users/colthafer/final-project/client_side-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import axios from'axios';import React from'react';import{Button,Icon,Modal}from'semantic-ui-react';import Chat from'./Chat';import ChatroomsList from'./ChatroomsList';// function exampleReducer(state, action) {\n//   switch (action.type) {\n//     case 'close':\n//       return { open: false }\n//     case 'open':\n//       return { open: true, size: action.size }\n//     default:\n//       throw new Error('Unsupported action...')\n//   }\n// }\nvar ModalChat=function ModalChat(props){var _React$useState=React.useState(),_React$useState2=_slicedToArray(_React$useState,2),currentChatroom=_React$useState2[0],setCurrentChatroom=_React$useState2[1];var _React$useState3=React.useState(false),_React$useState4=_slicedToArray(_React$useState3,2),open=_React$useState4[0],setOpen=_React$useState4[1];// const [state, dispatch] = React.useReducer(exampleReducer, {\n//   open: false,\n//   size: undefined,\n// })\n// const { open, size } = state\nvar initializeChat=function initializeChat(){var chatroom={name:props.request.title,request_id:props.request.id,volunteer_id:props.volunteer.id// id: Math.floor(Math.random() * Math.floor(100000)) + 1\n};axios.post(\"https://neighboraid.herokuapp.com/chatrooms\",{chatroom:chatroom}).then(function(response){if(response.status===200){var _chatroom=JSON.parse(response.request.requestData).chatroom;if(!_chatroom.messages)_chatroom.messages=[];setCurrentChatroom(_chatroom);setOpen(true);// dispatch({ type: 'open', size: 'fullscreen' })\n}});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(Button,{onClick:initializeChat,children:[/*#__PURE__*/_jsx(Icon,{name:\"desktop\"}),\"Start Chat\"]}),open&&/*#__PURE__*/_jsx(\"div\",{style:{backgroundColor:\"pink\"},children:/*#__PURE__*/_jsx(ChatroomsList,{user_id:props.volunteer&&props.volunteer.user_id,chatroom:currentChatroom})})]});};export default ModalChat;","map":{"version":3,"sources":["/Users/colthafer/final-project/client_side-main/src/ChatModal.js"],"names":["axios","React","Button","Icon","Modal","Chat","ChatroomsList","ModalChat","props","useState","currentChatroom","setCurrentChatroom","open","setOpen","initializeChat","chatroom","name","request","title","request_id","id","volunteer_id","volunteer","post","then","response","status","JSON","parse","requestData","messages","backgroundColor","user_id"],"mappings":"mTAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,MAAT,CAAiBC,IAAjB,CAAuBC,KAAvB,KAAoC,mBAApC,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAACC,KAAD,CAAW,qBACmBP,KAAK,CAACQ,QAAN,EADnB,oDACpBC,eADoB,qBACHC,kBADG,0CAEHV,KAAK,CAACQ,QAAN,CAAe,KAAf,CAFG,qDAEpBG,IAFoB,qBAEdC,OAFc,qBAG3B;AACA;AACA;AACA;AACA;AAEA,GAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,CAC3B,GAAMC,CAAAA,QAAQ,CAAI,CAChBC,IAAI,CAAER,KAAK,CAACS,OAAN,CAAcC,KADJ,CAEhBC,UAAU,CAAEX,KAAK,CAACS,OAAN,CAAcG,EAFV,CAGhBC,YAAY,CAAEb,KAAK,CAACc,SAAN,CAAgBF,EAC9B;AAJgB,CAAlB,CAMEpB,KAAK,CAACuB,IAAN,CAAW,6CAAX,CAA0D,CAACR,QAAQ,CAARA,QAAD,CAA1D,EACCS,IADD,CACO,SAAAC,QAAQ,CAAI,CACjB,GAAIA,QAAQ,CAACC,MAAT,GAAoB,GAAxB,CAA6B,CAC3B,GAAMX,CAAAA,SAAQ,CAAGY,IAAI,CAACC,KAAL,CAAWH,QAAQ,CAACR,OAAT,CAAiBY,WAA5B,EAAyCd,QAA1D,CACA,GAAI,CAACA,SAAQ,CAACe,QAAd,CAAwBf,SAAQ,CAACe,QAAT,CAAoB,EAApB,CACxBnB,kBAAkB,CAACI,SAAD,CAAlB,CACAF,OAAO,CAAC,IAAD,CAAP,CACA;AACD,CACF,CATD,EAUH,CAjBD,CAmBA,mBACE,wCAEE,MAAC,MAAD,EAAQ,OAAO,CAAEC,cAAjB,wBACE,KAAC,IAAD,EAAM,IAAI,CAAC,SAAX,EADF,gBAFF,CAcKF,IAAI,eAAI,YAAK,KAAK,CAAE,CAACmB,eAAe,CAAE,MAAlB,CAAZ,uBAAuC,KAAC,aAAD,EAAe,OAAO,CAAEvB,KAAK,CAACc,SAAN,EAAmBd,KAAK,CAACc,SAAN,CAAgBU,OAA3D,CAAoE,QAAQ,CAAEtB,eAA9E,EAAvC,EAdb,GADF,CA4BD,CAxDD,CA0DA,cAAeH,CAAAA,SAAf","sourcesContent":["import axios from 'axios'\r\nimport React from 'react'\r\nimport { Button, Icon, Modal } from 'semantic-ui-react'\r\nimport Chat from './Chat'\r\nimport ChatroomsList from './ChatroomsList'\r\n\r\n// function exampleReducer(state, action) {\r\n//   switch (action.type) {\r\n//     case 'close':\r\n//       return { open: false }\r\n//     case 'open':\r\n//       return { open: true, size: action.size }\r\n//     default:\r\n//       throw new Error('Unsupported action...')\r\n//   }\r\n// }\r\n\r\nconst ModalChat = (props) => {\r\n  const [currentChatroom, setCurrentChatroom] = React.useState();\r\n  const [open, setOpen] = React.useState(false);\r\n  // const [state, dispatch] = React.useReducer(exampleReducer, {\r\n  //   open: false,\r\n  //   size: undefined,\r\n  // })\r\n  // const { open, size } = state\r\n\r\n  const initializeChat = () => {\r\n    const chatroom  = {\r\n      name: props.request.title,\r\n      request_id: props.request.id,\r\n      volunteer_id: props.volunteer.id,\r\n      // id: Math.floor(Math.random() * Math.floor(100000)) + 1\r\n    }\r\n      axios.post(\"https://neighboraid.herokuapp.com/chatrooms\", {chatroom})\r\n      .then (response => {\r\n        if (response.status === 200) {\r\n          const chatroom = JSON.parse(response.request.requestData).chatroom;\r\n          if (!chatroom.messages) chatroom.messages = [];\r\n          setCurrentChatroom(chatroom);\r\n          setOpen(true);\r\n          // dispatch({ type: 'open', size: 'fullscreen' })\r\n        }\r\n      })\r\n  }\r\n\r\n  return (\r\n    <>\r\n \r\n      <Button onClick={initializeChat}>\r\n        <Icon name='desktop' />\r\n        Start Chat\r\n      </Button>\r\n\r\n      {/* <Modal\r\n        size={size}\r\n        open={open}\r\n        onClose={() => dispatch({ type: 'close' })}\r\n      >\r\n        <Modal.Header>Message Request Owner</Modal.Header>\r\n        <Modal.Content> */}\r\n        {open && <div style={{backgroundColor: \"pink\"}}><ChatroomsList user_id={props.volunteer && props.volunteer.user_id} chatroom={currentChatroom}/></div>}\r\n        {/* </Modal.Content> */}\r\n        {/* <Modal.Actions>\r\n          <Button negative onClick={() => dispatch({ type: 'close' })}>\r\n            No\r\n          </Button>\r\n          <Button positive onClick={() => dispatch({ type: 'close' })}>\r\n            Yes\r\n          </Button>\r\n        </Modal.Actions> */}\r\n      {/* </Modal> */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ModalChat"]},"metadata":{},"sourceType":"module"}