{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js\";\nimport React from 'react';\nimport { ActionCable, ActionCableConsumer } from 'react-actioncable-provider';\nimport { API_ROOT } from './constants/index';\nimport NewChatroomForm from './NewChatroomForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport axios from 'axios';\n\nclass ChatroomsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // chatrooms: [],\n      activeChatroom: {} //this.props.chatroom\n\n    };\n\n    this.componentWillMount = () => {\n      const {\n        chatroom\n      } = this.props;\n      if (!chatroom.messages) chatroom.messages = [];\n      if (!chatroom.id) chatroom.id = 1;\n      this.setState({\n        activeChatroom: chatroom\n      });\n      this.postFirstMessage(chatroom.id); //   console.log('mounted', this.props);\n      //   axios.get(`${API_ROOT}/chatrooms`)\n      //     .then(res => {\n      //       console.log('res', res); \n      //       this.setState({chatrooms: res.data, loadingState: 'Loaded' })\n      //       // res\n      //     })\n      //     // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\n    };\n\n    this.handleReceivedMessage = response => {\n      const {\n        message\n      } = response;\n      const {\n        activeChatroom\n      } = this.state; // const chatrooms = [...this.state.chatrooms];\n      // const chatroom = chatrooms.find(\n      //   chatroom => chatroom.id === message.chatroom_id\n      // );\n\n      if (!activeChatroom.messages) activeChatroom.messages = []; // activeChatroom.messages.concat(message)\n\n      activeChatroom.messages = [...activeChatroom.messages, message];\n      this.setState({\n        activeChatroom\n      });\n    };\n\n    this.postFirstMessage = roomId => {\n      window.history.pushState(null, null, `/rooms/${roomId}`);\n      const message = {\n        body: `${this.props.user_id} has joined this room!`,\n        user_id: this.props.user_id,\n        room_id: roomId\n      };\n      axios.post(\"http://localhost:3000/messages\", {\n        message\n      }).then(result => {\n        console.log(result);\n      });\n    };\n\n    this.render = () => {\n      const {\n        activeChatroom\n      } = this.state;\n      console.log(activeChatroom);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ChatroomsList\",\n        children: activeChatroom ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: activeChatroom ? /*#__PURE__*/_jsxDEV(MessagesArea, {\n            cableApp: this.props.CableApp,\n            chatroom: activeChatroom,\n            user_id: this.props.user_id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this) : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 9\n        }, this) : 'No Chats were found'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default ChatroomsList; // helpers\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\n//   console.log('chatrooms', chatrooms)\n//   return chatrooms.find(\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\n//   );\n// };\n// const mapchatrooms = (chatrooms, handleClick) => {\n//   return chatrooms.map(chatroom => {\n//     return (\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\n//         {chatroom.name}\n//       </li>\n//     );\n//   });\n// };","map":{"version":3,"sources":["/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCable","ActionCableConsumer","API_ROOT","NewChatroomForm","MessagesArea","Cable","axios","ChatroomsList","Component","state","activeChatroom","componentWillMount","chatroom","props","messages","id","setState","postFirstMessage","handleReceivedMessage","response","message","roomId","window","history","pushState","body","user_id","room_id","post","then","result","console","log","render","CableApp"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ActionCable, ActionCableConsumer } from 'react-actioncable-provider';\r\nimport { API_ROOT } from './constants/index';\r\nimport NewChatroomForm from './NewChatroomForm';\r\nimport MessagesArea from './MessagesArea';\r\nimport Cable from './Cable';\r\nimport axios from 'axios';\r\n\r\nclass ChatroomsList extends React.Component {\r\n  state = {\r\n    // chatrooms: [],\r\n    activeChatroom: {}//this.props.chatroom\r\n  };\r\n\r\n  componentWillMount = () => {\r\n    const { chatroom } = this.props;\r\n    if (!chatroom.messages) chatroom.messages = [];\r\n    if (!chatroom.id) chatroom.id = 1;\r\n    this.setState({activeChatroom: chatroom});\r\n    this.postFirstMessage(chatroom.id);\r\n  //   console.log('mounted', this.props);\r\n  //   axios.get(`${API_ROOT}/chatrooms`)\r\n  //     .then(res => {\r\n  //       console.log('res', res); \r\n  //       this.setState({chatrooms: res.data, loadingState: 'Loaded' })\r\n  //       // res\r\n  //     })\r\n  //     // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n  };\r\n\r\n  // handleClick = id => {\r\n  //   this.setState({ activeChatroom: id });\r\n  // };\r\n\r\n  // handleReceivedChatroom = response => {\r\n  //   const { chatroom } = response;\r\n  //   this.setState({\r\n  //     chatrooms: [...this.state.chatrooms, chatroom]\r\n  //   });\r\n  // };\r\n\r\n  handleReceivedMessage = response => {\r\n    const { message } = response;\r\n    const {activeChatroom} = this.state;\r\n    // const chatrooms = [...this.state.chatrooms];\r\n    // const chatroom = chatrooms.find(\r\n    //   chatroom => chatroom.id === message.chatroom_id\r\n    // );\r\n    if (!activeChatroom.messages) activeChatroom.messages = [];\r\n    // activeChatroom.messages.concat(message)\r\n    activeChatroom.messages = [...activeChatroom.messages, message];\r\n    this.setState({ activeChatroom });\r\n  };\r\n\r\n  postFirstMessage = (roomId) => {\r\n    window.history.pushState(null, null, `/rooms/${roomId}`)\r\n    const message = {\r\n      body: `${this.props.user_id} has joined this room!`,\r\n      user_id: this.props.user_id,\r\n      room_id: roomId\r\n    }\r\n    axios.post(\"http://localhost:3000/messages\", {message})\r\n    .then(result => {\r\n        console.log(result)\r\n    })\r\n  }\r\n\r\n  render = () => {\r\n    const { activeChatroom } = this.state;\r\n    console.log(activeChatroom);\r\n    return (\r\n      <div className=\"ChatroomsList\">\r\n        {/* <h1>{activeChatroom.name}</h1> */}\r\n        {activeChatroom ?\r\n        <div>\r\n          {/* <ActionCableConsumer\r\n            channel={{ channel: 'chatroom_channel' }}\r\n          />\r\n            <Cable\r\n              chatroom={activeChatroom}\r\n              handleReceivedMessage={this.handleReceivedMessage}\r\n            /> */}\r\n          {/* <h2>Chatrooms</h2> */}\r\n          {/* <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul> */}\r\n          {/* <NewChatroomForm /> */}\r\n          {activeChatroom ? (\r\n            <MessagesArea\r\n              cableApp={this.props.CableApp}\r\n              chatroom={activeChatroom}\r\n              user_id={this.props.user_id}\r\n            />\r\n          ) : null}\r\n          </div>\r\n          : 'No Chats were found'}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomsList;\r\n\r\n// helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   console.log('chatrooms', chatrooms)\r\n//   return chatrooms.find(\r\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\r\n//   );\r\n// };\r\n\r\n// const mapchatrooms = (chatrooms, handleClick) => {\r\n//   return chatrooms.map(chatroom => {\r\n//     return (\r\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n//         {chatroom.name}\r\n//       </li>\r\n//     );\r\n//   });\r\n// };"]},"metadata":{},"sourceType":"module"}