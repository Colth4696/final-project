{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js\";\nimport React from 'react';\nimport { ActionCable } from 'react-actioncable-provider';\nimport { API_ROOT } from './constants/index';\nimport NewChatroomForm from './NewChatroomForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport axios from 'axios';\n\nclass ChatroomsList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatrooms: [],\n      activeChatroom: null\n    };\n\n    this.componentDidMount = () => {\n      axios.get(`${API_ROOT}/chatrooms`).then(res => res.json()).then(chatrooms => this.setState({\n        chatrooms\n      }));\n    };\n\n    this.handleClick = id => {\n      this.setState({\n        activeChatroom: id\n      });\n    };\n\n    this.handleReceivedChatroom = response => {\n      const {\n        chatroom\n      } = response;\n      this.setState({\n        chatrooms: [...this.state.chatrooms, chatroom]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      const {\n        message\n      } = response;\n      const chatrooms = [...this.state.chatrooms];\n      const chatroom = chatrooms.find(chatroom => chatroom.id === message.chatroom_id);\n      chatroom.messages = [...chatroom.messages, message];\n      this.setState({\n        chatrooms\n      });\n    };\n\n    this.render = () => {\n      const {\n        chatrooms,\n        activeChatroom\n      } = this.state;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ChatroomsList\",\n        children: [/*#__PURE__*/_jsxDEV(ActionCable, {\n          channel: {\n            channel: 'ChatroomsChannel'\n          },\n          onReceived: this.handleReceivedChatroom\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }, this), this.state.chatrooms.length ? /*#__PURE__*/_jsxDEV(Cable, {\n          chatrooms: chatrooms,\n          handleReceivedMessage: this.handleReceivedMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this) : null, /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Chatrooms\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: mapchatrooms(chatrooms, this.handleClick)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(NewChatroomForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }, this), activeChatroom ? /*#__PURE__*/_jsxDEV(MessagesArea, {\n          chatroom: findActiveChatroom(chatrooms, activeChatroom)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default ChatroomsList; // helpers\n\nconst findActiveChatroom = (chatrooms, activeChatroom) => {\n  return chatrooms.find(chatroom => chatroom.id === activeChatroom);\n};\n\nconst mapchatrooms = (chatrooms, handleClick) => {\n  return chatrooms.map(chatroom => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => handleClick(chatroom.id),\n      children: chatroom.name\n    }, chatroom.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this);\n  });\n};","map":{"version":3,"sources":["/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCable","API_ROOT","NewChatroomForm","MessagesArea","Cable","axios","ChatroomsList","Component","state","chatrooms","activeChatroom","componentDidMount","get","then","res","json","setState","handleClick","id","handleReceivedChatroom","response","chatroom","handleReceivedMessage","message","find","chatroom_id","messages","render","channel","length","mapchatrooms","findActiveChatroom","map","name"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { ActionCable } from 'react-actioncable-provider';\r\nimport { API_ROOT } from './constants/index';\r\nimport NewChatroomForm from './NewChatroomForm';\r\nimport MessagesArea from './MessagesArea';\r\nimport Cable from './Cable';\r\nimport axios from 'axios';\r\n\r\nclass ChatroomsList extends React.Component {\r\n  state = {\r\n    chatrooms: [],\r\n    activeChatroom: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    \r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => res.json())\r\n      .then(chatrooms => this.setState({ chatrooms }));\r\n  };\r\n\r\n  handleClick = id => {\r\n    this.setState({ activeChatroom: id });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    const { message } = response;\r\n    const chatrooms = [...this.state.chatrooms];\r\n    const chatroom = chatrooms.find(\r\n      chatroom => chatroom.id === message.chatroom_id\r\n    );\r\n    chatroom.messages = [...chatroom.messages, message];\r\n    this.setState({ chatrooms });\r\n  };\r\n\r\n  render = () => {\r\n    const { chatrooms, activeChatroom } = this.state;\r\n    return (\r\n      <div className=\"ChatroomsList\">\r\n        <ActionCable\r\n          channel={{ channel: 'ChatroomsChannel' }}\r\n          onReceived={this.handleReceivedChatroom}\r\n        />\r\n        {this.state.chatrooms.length ? (\r\n          <Cable\r\n            chatrooms={chatrooms}\r\n            handleReceivedMessage={this.handleReceivedMessage}\r\n          />\r\n        ) : null}\r\n        <h2>Chatrooms</h2>\r\n        <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\r\n        <NewChatroomForm />\r\n        {activeChatroom ? (\r\n          <MessagesArea\r\n            chatroom={findActiveChatroom(\r\n              chatrooms,\r\n              activeChatroom\r\n            )}\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomsList;\r\n\r\n// helpers\r\n\r\nconst findActiveChatroom = (chatrooms, activeChatroom) => {\r\n  return chatrooms.find(\r\n    chatroom => chatroom.id === activeChatroom\r\n  );\r\n};\r\n\r\nconst mapchatrooms = (chatrooms, handleClick) => {\r\n  return chatrooms.map(chatroom => {\r\n    return (\r\n      <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n        {chatroom.name}\r\n      </li>\r\n    );\r\n  });\r\n};"]},"metadata":{},"sourceType":"module"}