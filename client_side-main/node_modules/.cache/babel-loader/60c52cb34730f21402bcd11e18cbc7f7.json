{"ast":null,"code":"import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import _toConsumableArray from\"/Users/colthafer/final-project/client_side-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _classCallCheck from\"/Users/colthafer/final-project/client_side-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _inherits from\"/Users/colthafer/final-project/client_side-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/colthafer/final-project/client_side-main/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React from'react';import{ActionCableConsumer}from'react-actioncable-provider';import ActionCable from'actioncable';import{API_ROOT,API_WS_ROOT}from'./constants/index';import NewChatroomForm from'./NewChatroomForm';import MessagesArea from'./MessagesArea';import Cable from'./Cable';import axios from'axios';// const actionCable = {};\n// actionCable.cable = ActionCable.createConsumer(API_WS_ROOT);\nvar ChatroomList=/*#__PURE__*/function(_React$Component){_inherits(ChatroomList,_React$Component);var _super=_createSuper(ChatroomList);function ChatroomList(){var _this;_classCallCheck(this,ChatroomList);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={chatrooms:[],activeChatroom:_this.props.chatroom};_this.componentDidMount=function(){var activeChatroom=_this.state.activeChatroom;axios.get(\"\".concat(API_ROOT,\"/chatrooms\")).then(function(res){var chatroomList=res.data;var currentRoom=chatroomList.find(function(room){return room.name===activeChatroom.name&&room.request_id===activeChatroom.request_id&&room.volunteer_id===activeChatroom.volunteer_id;});_this.setState({activeChatroom:currentRoom});});};_this.handleClick=function(name){_this.setState({activeChatroom:name});};_this.handleReceivedChatroom=function(response){console.log('handleReceivedChatroom',response);var chatroom=response.chatroom;_this.setState({chatrooms:[].concat(_toConsumableArray(_this.state.chatrooms),[chatroom])});};_this.handleReceivedMessage=function(response){console.log('response message',response);var message=response.message;var activeChatroom=_this.state.activeChatroom;activeChatroom.messages=[].concat(_toConsumableArray(activeChatroom.messages),[message]);_this.setState({activeChatroom:activeChatroom});};_this.render=function(){var _this$state=_this.state,chatrooms=_this$state.chatrooms,activeChatroom=_this$state.activeChatroom;// console.log('actionCable', actionCable);\nconsole.log('activeChatroom',activeChatroom);// actionCable.cable.subscriptions.create({channel: 'ChatroomsChannel'}, \n//   {\n//     received: (data) => {\n//       console.log(data);\n//       this.handleReceivedChatroom(data)\n//     }\n//   }\n// );\n// actionCable.cable.subscriptions.create({channel: 'MessagesChannel', chatroom: activeChatroom.id}, \n//   {\n//     received: (data) => {\n//       console.log(data);\n//       this.handleReceivedMessage(data)\n//     }\n//   }\n// )\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"chatroomsList\",children:[/*#__PURE__*/_jsx(\"div\",{}),activeChatroom?/*#__PURE__*/_jsx(ActionCableConsumer,{// cable={actionCable.cable}\nchannel:{channel:'MessagesChannel',chatroom:activeChatroom.id},onReceived:function onReceived(res){console.log(res);_this.handleReceivedMessage(res);}// onInitialized= {(res) => console.log(res)}\n// onConnected= {(res) => console.log(res)}\n// onDisconnected= {(res) => console.log('disconnecting...',res)}\n// onRejected= {(res) => console.log(res)}\n},activeChatroom.id):null,activeChatroom?/*#__PURE__*/_jsx(MessagesArea,{chatroom:activeChatroom,user_id:_this.props.user_id// findActiveChatroom(\n//   chatrooms,\n//   activeChatroom\n// )\n}):null]});};return _this;}return ChatroomList;}(React.Component);export default ChatroomList;// helpers\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\n//   return chatrooms.find(\n//     chatroom => {\n//       console.log(chatroom);\n//       console.log(activeChatroom);\n//       return chatroom.name === activeChatroom\n//     }\n//   );\n// };\nvar mapChatrooms=function mapChatrooms(chatrooms,handleClick){return chatrooms.map(function(chatroom){return/*#__PURE__*/_jsx(\"li\",{onClick:function onClick(){return handleClick(chatroom.name);},children:chatroom.name},chatroom.name);});};// import React from 'react';\n// import { ActionCable } from 'react-actioncable-provider';\n// import { API_ROOT } from './constants/index';\n// import NewChatroomForm from './NewChatroomForm';\n// import MessagesArea from './MessagesArea';\n// import Cable from './Cable';\n// import axios from 'axios';\n// class ChatroomsList extends React.Component {\n//   state = {\n//     // chatrooms: [],\n//     activeChatroom: {}//this.props.chatroom\n//   };\n//   componentWillMount = () => {\n//     const { chatroom } = this.props;\n//     if (!chatroom.messages) chatroom.messages = [];\n//     if (!chatroom.id) chatroom.id = 1;\n//     // this.setState({activeChatroom: chatroom});\n//   //   console.log('mounted', this.props);\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\n//       .then(res => {\n//         console.log('res', res); \n//         this.setState({activeChatroom: res.data})\n//         // res\n//       })\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\n//   };\n//   // handleClick = id => {\n//   //   this.setState({ activeChatroom: id });\n//   // };\n//   // handleReceivedChatroom = response => {\n//   //   const { chatroom } = response;\n//   //   this.setState({\n//   //     chatrooms: [...this.state.chatrooms, chatroom]\n//   //   });\n//   // };\n//   handleReceivedMessage = response => {\n//     const { message } = response;\n//     const {activeChatroom} = this.state;\n//     // const chatrooms = [...this.state.chatrooms];\n//     // const chatroom = chatrooms.find(\n//     //   chatroom => chatroom.id === message.chatroom_id\n//     // );\n//     if (!activeChatroom.messages) activeChatroom.messages = [];\n//     // activeChatroom.messages.concat(message)\n//     activeChatroom.messages = [...activeChatroom.messages, message];\n//     this.setState({ activeChatroom });\n//   };\n//   render = () => {\n//     const { activeChatroom } = this.state;\n//     console.log(activeChatroom);\n//     return (\n//       <div className=\"ChatroomsList\">\n//         <h1>{activeChatroom.name}</h1>\n//         {activeChatroom ?\n//         <div>\n//           <ActionCable\n//             channel={{ channel: 'chatroom_channel' }}\n//           />\n//             <Cable\n//               chatroom={activeChatroom}\n//               handleReceivedMessage={this.handleReceivedMessage}\n//             />\n//           <h2>Chatrooms</h2>\n//           <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\n//           <NewChatroomForm />\n//           {activeChatroom ? (\n//             <MessagesArea\n//               chatroom={activeChatroom}\n//               user_id={this.props.user_id}\n//             />\n//           ) : null}\n//           </div>\n//           : 'No Chats were found'}\n//       </div>\n//     );\n//   };\n// }\n// export default ChatroomsList;\n// // helpers\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\n//   console.log('chatrooms', chatrooms)\n//   return chatrooms.find(\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\n//   );\n// };\n// const mapchatrooms = (chatrooms, handleClick) => {\n//   return chatrooms.map(chatroom => {\n//     return (\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\n//         {chatroom.name}\n//       </li>\n//     );\n//   });\n// };","map":{"version":3,"sources":["/Users/colthafer/final-project/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCableConsumer","ActionCable","API_ROOT","API_WS_ROOT","NewChatroomForm","MessagesArea","Cable","axios","ChatroomList","state","chatrooms","activeChatroom","props","chatroom","componentDidMount","get","then","res","chatroomList","data","currentRoom","find","room","name","request_id","volunteer_id","setState","handleClick","handleReceivedChatroom","response","console","log","handleReceivedMessage","message","messages","render","channel","id","user_id","Component","mapChatrooms","map"],"mappings":"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AE,yBAAMc,CAAAA,WAAW,CAACd,QAAQ,CAACU,IAAV,CAAjB,EAAjC,UACGV,QAAQ,CAACU,IADZ,EAASV,QAAQ,CAACU,IAAlB,CADF,CAKD,CANM,CAAP,CAOD,CARD,CAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { ActionCableConsumer } from 'react-actioncable-provider';\r\nimport ActionCable from 'actioncable';\r\nimport { API_ROOT, API_WS_ROOT } from './constants/index';\r\nimport NewChatroomForm from './NewChatroomForm';\r\nimport MessagesArea from './MessagesArea';\r\nimport Cable from './Cable';\r\nimport axios from 'axios';\r\n\r\n// const actionCable = {};\r\n// actionCable.cable = ActionCable.createConsumer(API_WS_ROOT);\r\n\r\nclass ChatroomList extends React.Component {\r\n  state = {\r\n    chatrooms: [],\r\n    activeChatroom: this.props.chatroom\r\n  };\r\n\r\n  //   componentWillMount = () => {\r\n//     const { chatroom } = this.props;\r\n//     if (!chatroom.messages) chatroom.messages = [];\r\n//     if (!chatroom.id) chatroom.id = 1;\r\n//     // this.setState({activeChatroom: chatroom});\r\n//   //   console.log('mounted', this.props);\r\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n//       .then(res => {\r\n//         console.log('res', res); \r\n//         this.setState({activeChatroom: res.data})\r\n//         // res\r\n//       })\r\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n//   };\r\n\r\n  componentDidMount = () => {\r\n    const { activeChatroom } = this.state;\r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => {\r\n        const chatroomList = res.data;\r\n        const currentRoom = chatroomList.find(room => {\r\n          return room.name === activeChatroom.name && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id\r\n        })\r\n        this.setState({ activeChatroom: currentRoom })\r\n      })\r\n  };\r\n\r\n  handleClick = name => {\r\n    this.setState({ activeChatroom: name });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    console.log('handleReceivedChatroom', response);\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    console.log('response message', response);\r\n    const { message } = response;\r\n    const { activeChatroom } = this.state;\r\n    activeChatroom.messages = [...activeChatroom.messages, message];\r\n    this.setState({ activeChatroom });\r\n  };\r\n\r\n  render = () => {\r\n    const { chatrooms, activeChatroom } = this.state;\r\n    // console.log('actionCable', actionCable);\r\n    console.log('activeChatroom', activeChatroom);\r\n    // actionCable.cable.subscriptions.create({channel: 'ChatroomsChannel'}, \r\n    //   {\r\n    //     received: (data) => {\r\n    //       console.log(data);\r\n    //       this.handleReceivedChatroom(data)\r\n    //     }\r\n    //   }\r\n    // );\r\n    // actionCable.cable.subscriptions.create({channel: 'MessagesChannel', chatroom: activeChatroom.id}, \r\n    //   {\r\n    //     received: (data) => {\r\n    //       console.log(data);\r\n    //       this.handleReceivedMessage(data)\r\n    //     }\r\n    //   }\r\n    // )\r\n    return (\r\n      <div className=\"chatroomsList\">\r\n        <div>\r\n          {/* {} */}\r\n            {/* <Cable\r\n              chatroom={this.props.chatroom}\r\n              handleReceivedMessage={this.handleReceivedMessage}\r\n            /> */}\r\n        </div>\r\n        {/* <ActionCableConsumer\r\n          cable={actionCable.cable}\r\n          channel='chatrooms_channel'\r\n          onReceived={this.handleReceivedChatroom}\r\n        >\r\n          <Cable\r\n            chatroom={this.props.chatroom}\r\n            handleReceivedMessage={this.handleReceivedMessage}\r\n          />\r\n        </ActionCableConsumer> */}\r\n        {/* ) : null} */}\r\n        {/* <h2>Chatrooms</h2> */}\r\n        {/* <ul>{mapChatrooms(chatrooms, this.handleClick)}</ul> */}\r\n        {/* <NewChatroomForm /> */}\r\n        {activeChatroom ? (\r\n           <ActionCableConsumer\r\n            key={activeChatroom.id}\r\n            // cable={actionCable.cable}\r\n            channel={{ channel: 'MessagesChannel', chatroom: activeChatroom.id }}\r\n            onReceived={(res) => {console.log(res); this.handleReceivedMessage(res)}}\r\n            // onInitialized= {(res) => console.log(res)}\r\n            // onConnected= {(res) => console.log(res)}\r\n            // onDisconnected= {(res) => console.log('disconnecting...',res)}\r\n            // onRejected= {(res) => console.log(res)}\r\n          />\r\n        ) : null}\r\n        {activeChatroom ? (\r\n          <MessagesArea\r\n            chatroom={activeChatroom}\r\n            user_id={this.props.user_id}\r\n            // findActiveChatroom(\r\n            //   chatrooms,\r\n            //   activeChatroom\r\n            // )\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomList;\r\n\r\n// helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   return chatrooms.find(\r\n//     chatroom => {\r\n//       console.log(chatroom);\r\n//       console.log(activeChatroom);\r\n//       return chatroom.name === activeChatroom\r\n//     }\r\n//   );\r\n// };\r\n\r\nconst mapChatrooms = (chatrooms, handleClick) => {\r\n  return chatrooms.map(chatroom => {\r\n    return (\r\n      <li key={chatroom.name} onClick={() => handleClick(chatroom.name)}>\r\n        {chatroom.name}\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { ActionCable } from 'react-actioncable-provider';\r\n// import { API_ROOT } from './constants/index';\r\n// import NewChatroomForm from './NewChatroomForm';\r\n// import MessagesArea from './MessagesArea';\r\n// import Cable from './Cable';\r\n// import axios from 'axios';\r\n\r\n// class ChatroomsList extends React.Component {\r\n//   state = {\r\n//     // chatrooms: [],\r\n//     activeChatroom: {}//this.props.chatroom\r\n//   };\r\n\r\n//   componentWillMount = () => {\r\n//     const { chatroom } = this.props;\r\n//     if (!chatroom.messages) chatroom.messages = [];\r\n//     if (!chatroom.id) chatroom.id = 1;\r\n//     // this.setState({activeChatroom: chatroom});\r\n//   //   console.log('mounted', this.props);\r\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n//       .then(res => {\r\n//         console.log('res', res); \r\n//         this.setState({activeChatroom: res.data})\r\n//         // res\r\n//       })\r\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n//   };\r\n\r\n//   // handleClick = id => {\r\n//   //   this.setState({ activeChatroom: id });\r\n//   // };\r\n\r\n//   // handleReceivedChatroom = response => {\r\n//   //   const { chatroom } = response;\r\n//   //   this.setState({\r\n//   //     chatrooms: [...this.state.chatrooms, chatroom]\r\n//   //   });\r\n//   // };\r\n\r\n//   handleReceivedMessage = response => {\r\n//     const { message } = response;\r\n//     const {activeChatroom} = this.state;\r\n//     // const chatrooms = [...this.state.chatrooms];\r\n//     // const chatroom = chatrooms.find(\r\n//     //   chatroom => chatroom.id === message.chatroom_id\r\n//     // );\r\n//     if (!activeChatroom.messages) activeChatroom.messages = [];\r\n//     // activeChatroom.messages.concat(message)\r\n//     activeChatroom.messages = [...activeChatroom.messages, message];\r\n//     this.setState({ activeChatroom });\r\n//   };\r\n\r\n//   render = () => {\r\n//     const { activeChatroom } = this.state;\r\n//     console.log(activeChatroom);\r\n//     return (\r\n//       <div className=\"ChatroomsList\">\r\n//         <h1>{activeChatroom.name}</h1>\r\n//         {activeChatroom ?\r\n//         <div>\r\n//           <ActionCable\r\n//             channel={{ channel: 'chatroom_channel' }}\r\n//           />\r\n//             <Cable\r\n//               chatroom={activeChatroom}\r\n//               handleReceivedMessage={this.handleReceivedMessage}\r\n//             />\r\n//           <h2>Chatrooms</h2>\r\n//           <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\r\n//           <NewChatroomForm />\r\n//           {activeChatroom ? (\r\n//             <MessagesArea\r\n//               chatroom={activeChatroom}\r\n//               user_id={this.props.user_id}\r\n//             />\r\n//           ) : null}\r\n//           </div>\r\n//           : 'No Chats were found'}\r\n//       </div>\r\n//     );\r\n//   };\r\n// }\r\n\r\n// export default ChatroomsList;\r\n\r\n// // helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   console.log('chatrooms', chatrooms)\r\n//   return chatrooms.find(\r\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\r\n//   );\r\n// };\r\n\r\n// const mapchatrooms = (chatrooms, handleClick) => {\r\n//   return chatrooms.map(chatroom => {\r\n//     return (\r\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n//         {chatroom.name}\r\n//       </li>\r\n//     );\r\n//   });\r\n// };"]},"metadata":{},"sourceType":"module"}