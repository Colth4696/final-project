{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js\";\nimport React from 'react';\nimport { ActionCableConsumer, ActionCableProvider } from 'react-actioncable-provider';\nimport ActionCable from 'actioncable';\nimport { API_ROOT, API_WS_ROOT } from './constants/index';\nimport NewChatroomForm from './NewChatroomForm';\nimport MessagesArea from './MessagesArea';\nimport Cable from './Cable';\nimport axios from 'axios'; // const actionCable = {};\n// actionCable.cable = ActionCable.createConsumer(API_WS_ROOT);\n\nclass ChatroomList extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chatrooms: [],\n      activeChatroom: this.props.chatroom\n    };\n\n    this.componentDidMount = () => {\n      const {\n        activeChatroom\n      } = this.state;\n      axios.get(`${API_ROOT}/chatrooms`).then(res => {\n        const chatroomList = res.data;\n        const currentRoom = chatroomList.find(room => {\n          return room.name === activeChatroom.name && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id;\n        });\n        this.setState({\n          activeChatroom: currentRoom\n        });\n      });\n    };\n\n    this.handleClick = name => {\n      this.setState({\n        activeChatroom: name\n      });\n    };\n\n    this.handleReceivedChatroom = response => {\n      console.log('handleReceivedChatroom', response);\n      const {\n        chatroom\n      } = response;\n      this.setState({\n        chatrooms: [...this.state.chatrooms, chatroom]\n      });\n    };\n\n    this.handleReceivedMessage = response => {\n      console.log('response message', response);\n      const {\n        message\n      } = response;\n      const chatrooms = [...this.state.chatrooms];\n      const chatroom = chatrooms.find(chatroom => chatroom.name === message.chatroom_id);\n      chatroom.messages = [...chatroom.messages, message];\n      this.setState({\n        chatrooms\n      });\n    };\n\n    this.render = () => {\n      const {\n        chatrooms,\n        activeChatroom\n      } = this.state; // console.log('actionCable', actionCable);\n\n      console.log('activeChatroom', activeChatroom); // actionCable.cable.subscriptions.create({channel: 'ChatroomsChannel'}, \n      //   {\n      //     received: (data) => {\n      //       console.log(data);\n      //       this.handleReceivedChatroom(data)\n      //     }\n      //   }\n      // );\n      // actionCable.cable.subscriptions.create({channel: 'MessagesChannel', chatroom: activeChatroom.id}, \n      //   {\n      //     received: (data) => {\n      //       console.log(data);\n      //       this.handleReceivedMessage(data)\n      //     }\n      //   }\n      // )\n\n      return /*#__PURE__*/_jsxDEV(ActionCableProvider, {\n        url: API_WS_ROOT,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chatroomsList\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this), activeChatroom ? /*#__PURE__*/_jsxDEV(ActionCableConsumer, {\n            // cable={actionCable.cable}\n            channel: {\n              channel: 'MessagesChannel',\n              chatroom: activeChatroom.id\n            },\n            onReceived: res => {\n              console.log(res);\n              this.handleReceivedMessage(res);\n            } // onInitialized= {(res) => console.log(res)}\n            // onConnected= {(res) => console.log(res)}\n            // onDisconnected= {(res) => console.log('disconnecting...',res)}\n            // onRejected= {(res) => console.log(res)}\n\n          }, activeChatroom.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this) : null, activeChatroom ? /*#__PURE__*/_jsxDEV(MessagesArea, {\n            chatroom: activeChatroom,\n            user_id: this.props.user_id // findActiveChatroom(\n            //   chatrooms,\n            //   activeChatroom\n            // )\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default ChatroomList; // helpers\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\n//   return chatrooms.find(\n//     chatroom => {\n//       console.log(chatroom);\n//       console.log(activeChatroom);\n//       return chatroom.name === activeChatroom\n//     }\n//   );\n// };\n\nconst mapChatrooms = (chatrooms, handleClick) => {\n  return chatrooms.map(chatroom => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      onClick: () => handleClick(chatroom.name),\n      children: chatroom.name\n    }, chatroom.name, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this);\n  });\n}; // import React from 'react';\n// import { ActionCable } from 'react-actioncable-provider';\n// import { API_ROOT } from './constants/index';\n// import NewChatroomForm from './NewChatroomForm';\n// import MessagesArea from './MessagesArea';\n// import Cable from './Cable';\n// import axios from 'axios';\n// class ChatroomsList extends React.Component {\n//   state = {\n//     // chatrooms: [],\n//     activeChatroom: {}//this.props.chatroom\n//   };\n//   componentWillMount = () => {\n//     const { chatroom } = this.props;\n//     if (!chatroom.messages) chatroom.messages = [];\n//     if (!chatroom.id) chatroom.id = 1;\n//     // this.setState({activeChatroom: chatroom});\n//   //   console.log('mounted', this.props);\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\n//       .then(res => {\n//         console.log('res', res); \n//         this.setState({activeChatroom: res.data})\n//         // res\n//       })\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\n//   };\n//   // handleClick = id => {\n//   //   this.setState({ activeChatroom: id });\n//   // };\n//   // handleReceivedChatroom = response => {\n//   //   const { chatroom } = response;\n//   //   this.setState({\n//   //     chatrooms: [...this.state.chatrooms, chatroom]\n//   //   });\n//   // };\n//   handleReceivedMessage = response => {\n//     const { message } = response;\n//     const {activeChatroom} = this.state;\n//     // const chatrooms = [...this.state.chatrooms];\n//     // const chatroom = chatrooms.find(\n//     //   chatroom => chatroom.id === message.chatroom_id\n//     // );\n//     if (!activeChatroom.messages) activeChatroom.messages = [];\n//     // activeChatroom.messages.concat(message)\n//     activeChatroom.messages = [...activeChatroom.messages, message];\n//     this.setState({ activeChatroom });\n//   };\n//   render = () => {\n//     const { activeChatroom } = this.state;\n//     console.log(activeChatroom);\n//     return (\n//       <div className=\"ChatroomsList\">\n//         <h1>{activeChatroom.name}</h1>\n//         {activeChatroom ?\n//         <div>\n//           <ActionCable\n//             channel={{ channel: 'chatroom_channel' }}\n//           />\n//             <Cable\n//               chatroom={activeChatroom}\n//               handleReceivedMessage={this.handleReceivedMessage}\n//             />\n//           <h2>Chatrooms</h2>\n//           <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\n//           <NewChatroomForm />\n//           {activeChatroom ? (\n//             <MessagesArea\n//               chatroom={activeChatroom}\n//               user_id={this.props.user_id}\n//             />\n//           ) : null}\n//           </div>\n//           : 'No Chats were found'}\n//       </div>\n//     );\n//   };\n// }\n// export default ChatroomsList;\n// // helpers\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\n//   console.log('chatrooms', chatrooms)\n//   return chatrooms.find(\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\n//   );\n// };\n// const mapchatrooms = (chatrooms, handleClick) => {\n//   return chatrooms.map(chatroom => {\n//     return (\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\n//         {chatroom.name}\n//       </li>\n//     );\n//   });\n// };","map":{"version":3,"sources":["/Users/jameshafer/Downloads/client_side-main/src/ChatroomsList.js"],"names":["React","ActionCableConsumer","ActionCableProvider","ActionCable","API_ROOT","API_WS_ROOT","NewChatroomForm","MessagesArea","Cable","axios","ChatroomList","Component","state","chatrooms","activeChatroom","props","chatroom","componentDidMount","get","then","res","chatroomList","data","currentRoom","find","room","name","request_id","volunteer_id","setState","handleClick","handleReceivedChatroom","response","console","log","handleReceivedMessage","message","chatroom_id","messages","render","channel","id","user_id","mapChatrooms","map"],"mappings":"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AWX,IAjCN,EAkCG3B,cAAc,gBACb,QAAC,YAAD;AACE,YAAA,QAAQ,EAAEA,cADZ;AAEE,YAAA,OAAO,EAAE,KAAKC,KAAL,CAAW2B,OAFtB,CAGE;AACA;AACA;AACA;;AANF;AAAA;AAAA;AAAA;AAAA,kBADa,GASX,IA3CN;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF;AAiDD,KA7HwC;AAAA;;AAAA;;AAgI3C,eAAehC,YAAf,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMiC,YAAY,GAAG,CAAC9B,SAAD,EAAYiB,WAAZ,KAA4B;AAC/C,SAAOjB,SAAS,CAAC+B,GAAV,CAAc5B,QAAQ,IAAI;AAC/B,wBACE;AAAwB,MAAA,OAAO,EAAE,MAAMc,WAAW,CAACd,QAAQ,CAACU,IAAV,CAAlD;AAAA,gBACGV,QAAQ,CAACU;AADZ,OAASV,QAAQ,CAACU,IAAlB;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GANM,CAAP;AAOD,CARD,C,CAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react';\r\nimport { ActionCableConsumer, ActionCableProvider } from 'react-actioncable-provider';\r\nimport ActionCable from 'actioncable';\r\nimport { API_ROOT, API_WS_ROOT } from './constants/index';\r\nimport NewChatroomForm from './NewChatroomForm';\r\nimport MessagesArea from './MessagesArea';\r\nimport Cable from './Cable';\r\nimport axios from 'axios';\r\n\r\n// const actionCable = {};\r\n// actionCable.cable = ActionCable.createConsumer(API_WS_ROOT);\r\n\r\nclass ChatroomList extends React.Component {\r\n  state = {\r\n    chatrooms: [],\r\n    activeChatroom: this.props.chatroom\r\n  };\r\n\r\n  //   componentWillMount = () => {\r\n//     const { chatroom } = this.props;\r\n//     if (!chatroom.messages) chatroom.messages = [];\r\n//     if (!chatroom.id) chatroom.id = 1;\r\n//     // this.setState({activeChatroom: chatroom});\r\n//   //   console.log('mounted', this.props);\r\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n//       .then(res => {\r\n//         console.log('res', res); \r\n//         this.setState({activeChatroom: res.data})\r\n//         // res\r\n//       })\r\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n//   };\r\n\r\n  componentDidMount = () => {\r\n    const { activeChatroom } = this.state;\r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => {\r\n        const chatroomList = res.data;\r\n        const currentRoom = chatroomList.find(room => {\r\n          return room.name === activeChatroom.name && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id\r\n        })\r\n        this.setState({ activeChatroom: currentRoom })\r\n      })\r\n  };\r\n\r\n  handleClick = name => {\r\n    this.setState({ activeChatroom: name });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    console.log('handleReceivedChatroom', response);\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    console.log('response message', response);\r\n    const { message } = response;\r\n    const chatrooms = [...this.state.chatrooms];\r\n    const chatroom = chatrooms.find(\r\n      chatroom => chatroom.name === message.chatroom_id\r\n    );\r\n    chatroom.messages = [...chatroom.messages, message];\r\n    this.setState({ chatrooms });\r\n  };\r\n\r\n  render = () => {\r\n    const { chatrooms, activeChatroom } = this.state;\r\n    // console.log('actionCable', actionCable);\r\n    console.log('activeChatroom', activeChatroom);\r\n    // actionCable.cable.subscriptions.create({channel: 'ChatroomsChannel'}, \r\n    //   {\r\n    //     received: (data) => {\r\n    //       console.log(data);\r\n    //       this.handleReceivedChatroom(data)\r\n    //     }\r\n    //   }\r\n    // );\r\n    // actionCable.cable.subscriptions.create({channel: 'MessagesChannel', chatroom: activeChatroom.id}, \r\n    //   {\r\n    //     received: (data) => {\r\n    //       console.log(data);\r\n    //       this.handleReceivedMessage(data)\r\n    //     }\r\n    //   }\r\n    // )\r\n    return (\r\n      <ActionCableProvider url={API_WS_ROOT}>\r\n        <div className=\"chatroomsList\">\r\n          <div>\r\n            {/* {} */}\r\n              {/* <Cable\r\n                chatroom={this.props.chatroom}\r\n                handleReceivedMessage={this.handleReceivedMessage}\r\n              /> */}\r\n          </div>\r\n          {/* <ActionCableConsumer\r\n            cable={actionCable.cable}\r\n            channel='chatrooms_channel'\r\n            onReceived={this.handleReceivedChatroom}\r\n          >\r\n            <Cable\r\n              chatroom={this.props.chatroom}\r\n              handleReceivedMessage={this.handleReceivedMessage}\r\n            />\r\n          </ActionCableConsumer> */}\r\n          {/* ) : null} */}\r\n          {/* <h2>Chatrooms</h2> */}\r\n          {/* <ul>{mapChatrooms(chatrooms, this.handleClick)}</ul> */}\r\n          {/* <NewChatroomForm /> */}\r\n          {activeChatroom ? (\r\n            <ActionCableConsumer\r\n              key={activeChatroom.id}\r\n              // cable={actionCable.cable}\r\n              channel={{ channel: 'MessagesChannel', chatroom: activeChatroom.id }}\r\n              onReceived={(res) => {console.log(res); this.handleReceivedMessage(res)}}\r\n              // onInitialized= {(res) => console.log(res)}\r\n              // onConnected= {(res) => console.log(res)}\r\n              // onDisconnected= {(res) => console.log('disconnecting...',res)}\r\n              // onRejected= {(res) => console.log(res)}\r\n            />\r\n          ) : null}\r\n          {activeChatroom ? (\r\n            <MessagesArea\r\n              chatroom={activeChatroom}\r\n              user_id={this.props.user_id}\r\n              // findActiveChatroom(\r\n              //   chatrooms,\r\n              //   activeChatroom\r\n              // )\r\n            />\r\n          ) : null}\r\n        </div>\r\n      </ActionCableProvider>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomList;\r\n\r\n// helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   return chatrooms.find(\r\n//     chatroom => {\r\n//       console.log(chatroom);\r\n//       console.log(activeChatroom);\r\n//       return chatroom.name === activeChatroom\r\n//     }\r\n//   );\r\n// };\r\n\r\nconst mapChatrooms = (chatrooms, handleClick) => {\r\n  return chatrooms.map(chatroom => {\r\n    return (\r\n      <li key={chatroom.name} onClick={() => handleClick(chatroom.name)}>\r\n        {chatroom.name}\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { ActionCable } from 'react-actioncable-provider';\r\n// import { API_ROOT } from './constants/index';\r\n// import NewChatroomForm from './NewChatroomForm';\r\n// import MessagesArea from './MessagesArea';\r\n// import Cable from './Cable';\r\n// import axios from 'axios';\r\n\r\n// class ChatroomsList extends React.Component {\r\n//   state = {\r\n//     // chatrooms: [],\r\n//     activeChatroom: {}//this.props.chatroom\r\n//   };\r\n\r\n//   componentWillMount = () => {\r\n//     const { chatroom } = this.props;\r\n//     if (!chatroom.messages) chatroom.messages = [];\r\n//     if (!chatroom.id) chatroom.id = 1;\r\n//     // this.setState({activeChatroom: chatroom});\r\n//   //   console.log('mounted', this.props);\r\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n//       .then(res => {\r\n//         console.log('res', res); \r\n//         this.setState({activeChatroom: res.data})\r\n//         // res\r\n//       })\r\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n//   };\r\n\r\n//   // handleClick = id => {\r\n//   //   this.setState({ activeChatroom: id });\r\n//   // };\r\n\r\n//   // handleReceivedChatroom = response => {\r\n//   //   const { chatroom } = response;\r\n//   //   this.setState({\r\n//   //     chatrooms: [...this.state.chatrooms, chatroom]\r\n//   //   });\r\n//   // };\r\n\r\n//   handleReceivedMessage = response => {\r\n//     const { message } = response;\r\n//     const {activeChatroom} = this.state;\r\n//     // const chatrooms = [...this.state.chatrooms];\r\n//     // const chatroom = chatrooms.find(\r\n//     //   chatroom => chatroom.id === message.chatroom_id\r\n//     // );\r\n//     if (!activeChatroom.messages) activeChatroom.messages = [];\r\n//     // activeChatroom.messages.concat(message)\r\n//     activeChatroom.messages = [...activeChatroom.messages, message];\r\n//     this.setState({ activeChatroom });\r\n//   };\r\n\r\n//   render = () => {\r\n//     const { activeChatroom } = this.state;\r\n//     console.log(activeChatroom);\r\n//     return (\r\n//       <div className=\"ChatroomsList\">\r\n//         <h1>{activeChatroom.name}</h1>\r\n//         {activeChatroom ?\r\n//         <div>\r\n//           <ActionCable\r\n//             channel={{ channel: 'chatroom_channel' }}\r\n//           />\r\n//             <Cable\r\n//               chatroom={activeChatroom}\r\n//               handleReceivedMessage={this.handleReceivedMessage}\r\n//             />\r\n//           <h2>Chatrooms</h2>\r\n//           <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\r\n//           <NewChatroomForm />\r\n//           {activeChatroom ? (\r\n//             <MessagesArea\r\n//               chatroom={activeChatroom}\r\n//               user_id={this.props.user_id}\r\n//             />\r\n//           ) : null}\r\n//           </div>\r\n//           : 'No Chats were found'}\r\n//       </div>\r\n//     );\r\n//   };\r\n// }\r\n\r\n// export default ChatroomsList;\r\n\r\n// // helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   console.log('chatrooms', chatrooms)\r\n//   return chatrooms.find(\r\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\r\n//   );\r\n// };\r\n\r\n// const mapchatrooms = (chatrooms, handleClick) => {\r\n//   return chatrooms.map(chatroom => {\r\n//     return (\r\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n//         {chatroom.name}\r\n//       </li>\r\n//     );\r\n//   });\r\n// };"]},"metadata":{},"sourceType":"module"}