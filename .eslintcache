[{"/Users/colthafer/final-project/client_side-main/src/index.js":"1","/Users/colthafer/final-project/client_side-main/src/Home.js":"2","/Users/colthafer/final-project/client_side-main/src/constants/index.js":"3","/Users/colthafer/final-project/client_side-main/src/MapContainer.js":"4","/Users/colthafer/final-project/client_side-main/src/RequestForm.js":"5","/Users/colthafer/final-project/client_side-main/src/Chat.js":"6","/Users/colthafer/final-project/client_side-main/src/ChatBox.js":"7","/Users/colthafer/final-project/client_side-main/src/NewMessageForm.js":"8","/Users/colthafer/final-project/client_side-main/src/Cable.js":"9","/Users/colthafer/final-project/client_side-main/src/ChatroomsList.js":"10","/Users/colthafer/final-project/client_side-main/src/NewChatroomForm.js":"11","/Users/colthafer/final-project/client_side-main/src/Footer.js":"12","/Users/colthafer/final-project/client_side-main/src/Dummy.js":"13","/Users/colthafer/final-project/client_side-main/src/MessagesArea.js":"14"},{"size":755,"mtime":1613867664000,"results":"15","hashOfConfig":"16"},{"size":1055,"mtime":1625801428723,"results":"17","hashOfConfig":"16"},{"size":237,"mtime":1630344886306,"results":"18","hashOfConfig":"16"},{"size":879,"mtime":1612414062000,"results":"19","hashOfConfig":"16"},{"size":3403,"mtime":1625801428714,"results":"20","hashOfConfig":"16"},{"size":942,"mtime":1611716426000,"results":"21","hashOfConfig":"16"},{"size":1899,"mtime":1625801428756,"results":"22","hashOfConfig":"16"},{"size":1392,"mtime":1613859984000,"results":"23","hashOfConfig":"16"},{"size":635,"mtime":1613863381000,"results":"24","hashOfConfig":"16"},{"size":8568,"mtime":1615436702000,"results":"25","hashOfConfig":"16"},{"size":937,"mtime":1612413966000,"results":"26","hashOfConfig":"16"},{"size":1237,"mtime":1613861508000,"results":"27","hashOfConfig":"16"},{"size":773,"mtime":1611716426000,"results":"28","hashOfConfig":"16"},{"size":702,"mtime":1613861595000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"4dr7wc",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/colthafer/final-project/client_side-main/src/index.js",[],["65","66"],"/Users/colthafer/final-project/client_side-main/src/Home.js",["67"],"import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {Link} from 'react-router-dom';\r\nimport Header from './Header'\r\nimport Dashboard from './components/registrations/Dashboard'\r\n\r\nclass Home extends Component {\r\n  constructor(props){\r\n  super(props)\r\n  }\r\n  \r\n handleClick = () => {\r\n    axios.delete('https://lastdance.herokuapp.com/logout', {withCredentials: true})\r\n    .then(response => {\r\n      this.props.handleLogout()\r\n      this.props.history.push('/')\r\n    })\r\n    .catch(error => console.log(error))\r\n  }\r\n  render(){\r\nreturn (\r\n    <div>\r\n   <div>\r\n       <Header/>\r\n       <br></br>\r\n       { \r\n        this.props.loggedInStatus ? \r\n        <Link to='/logout' onClick={this.handleClick}>Log Out</Link> : \r\n        null\r\n      }\r\n   </div>\r\n   \r\n    <div>\r\n      <Link to='/login'>Log In</Link>\r\n    <br></br>\r\n    <Link to='/signup'>Sign Up</Link>\r\n    {\r\n    this.props.loggedInStatus ?      \r\n    <Dashboard user={this.props.user}/>: \r\n    null\r\n    }\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n};\r\nexport default Home;\r\n",["68","69"],"/Users/colthafer/final-project/client_side-main/src/constants/index.js",[],["70","71"],"/Users/colthafer/final-project/client_side-main/src/MapContainer.js",[],["72","73"],"/Users/colthafer/final-project/client_side-main/src/RequestForm.js",[],"/Users/colthafer/final-project/client_side-main/src/Chat.js",[],"/Users/colthafer/final-project/client_side-main/src/ChatBox.js",[],"/Users/colthafer/final-project/client_side-main/src/NewMessageForm.js",["74"],"import axios from 'axios';\r\nimport React from 'react';\r\nimport { API_ROOT, HEADERS } from './constants/index';\r\n\r\nclass NewMessageForm extends React.Component {\r\n  state = {\r\n    body: '',\r\n    chatroom_id: this.props.chatroom_id,\r\n    user_id: this.props.user_id\r\n  };\r\n\r\n  componentWillReceiveProps = nextProps => {\r\n    this.setState({ chatroom_id: nextProps.chatroom_id });\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({ body: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { body, chatroom_id, user_id } = this.state;\r\n    console.log(user_id);\r\n    const message = {\r\n      body: body,\r\n      chatroom_id: chatroom_id,\r\n      user_id: user_id\r\n    }\r\n    axios.post(`${API_ROOT}/messages`, {message}).then(result => console.log(result))//.config && result.config.data && JSON.parse(result.config.data).message))\r\n    .catch(error => console.error(`Error: ${error}`));\r\n    this.setState({ body: '' });\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"newMessageForm\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label>New Message:</label>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            value={this.state.body}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input type=\"submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default NewMessageForm;","/Users/colthafer/final-project/client_side-main/src/Cable.js",[],"/Users/colthafer/final-project/client_side-main/src/ChatroomsList.js",["75","76","77","78","79","80"],"import React from 'react';\r\nimport { ActionCableConsumer } from 'react-actioncable-provider';\r\nimport ActionCable from 'actioncable';\r\nimport { API_ROOT, API_WS_ROOT } from './constants/index';\r\nimport NewChatroomForm from './NewChatroomForm';\r\nimport MessagesArea from './MessagesArea';\r\nimport Cable from './Cable';\r\nimport axios from 'axios';\r\n\r\n// const actionCable = {};\r\n// actionCable.cable = ActionCable.createConsumer(API_WS_ROOT);\r\n\r\nclass ChatroomList extends React.Component {\r\n  state = {\r\n    chatrooms: [],\r\n    activeChatroom: this.props.chatroom\r\n  };\r\n\r\n  //   componentWillMount = () => {\r\n//     const { chatroom } = this.props;\r\n//     if (!chatroom.messages) chatroom.messages = [];\r\n//     if (!chatroom.id) chatroom.id = 1;\r\n//     // this.setState({activeChatroom: chatroom});\r\n//   //   console.log('mounted', this.props);\r\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n//       .then(res => {\r\n//         console.log('res', res); \r\n//         this.setState({activeChatroom: res.data})\r\n//         // res\r\n//       })\r\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n//   };\r\n\r\n  componentDidMount = () => {\r\n    const { activeChatroom } = this.state;\r\n    axios.get(`${API_ROOT}/chatrooms`)\r\n      .then(res => {\r\n        const chatroomList = res.data;\r\n        const currentRoom = chatroomList.find(room => {\r\n          return room.name === activeChatroom.name && room.request_id === activeChatroom.request_id && room.volunteer_id === activeChatroom.volunteer_id\r\n        })\r\n        this.setState({ activeChatroom: currentRoom })\r\n      })\r\n  };\r\n\r\n  handleClick = name => {\r\n    this.setState({ activeChatroom: name });\r\n  };\r\n\r\n  handleReceivedChatroom = response => {\r\n    console.log('handleReceivedChatroom', response);\r\n    const { chatroom } = response;\r\n    this.setState({\r\n      chatrooms: [...this.state.chatrooms, chatroom]\r\n    });\r\n  };\r\n\r\n  handleReceivedMessage = response => {\r\n    console.log('response message', response);\r\n    const { message } = response;\r\n    const { activeChatroom } = this.state;\r\n    activeChatroom.messages = [...activeChatroom.messages, message];\r\n    this.setState({ activeChatroom });\r\n  };\r\n\r\n  render = () => {\r\n    const { chatrooms, activeChatroom } = this.state;\r\n    // console.log('actionCable', actionCable);\r\n    console.log('activeChatroom', activeChatroom);\r\n    // actionCable.cable.subscriptions.create({channel: 'ChatroomsChannel'}, \r\n    //   {\r\n    //     received: (data) => {\r\n    //       console.log(data);\r\n    //       this.handleReceivedChatroom(data)\r\n    //     }\r\n    //   }\r\n    // );\r\n    // actionCable.cable.subscriptions.create({channel: 'MessagesChannel', chatroom: activeChatroom.id}, \r\n    //   {\r\n    //     received: (data) => {\r\n    //       console.log(data);\r\n    //       this.handleReceivedMessage(data)\r\n    //     }\r\n    //   }\r\n    // )\r\n    return (\r\n      <div className=\"chatroomsList\">\r\n        <div>\r\n          {/* {} */}\r\n            {/* <Cable\r\n              chatroom={this.props.chatroom}\r\n              handleReceivedMessage={this.handleReceivedMessage}\r\n            /> */}\r\n        </div>\r\n        {/* <ActionCableConsumer\r\n          cable={actionCable.cable}\r\n          channel='chatrooms_channel'\r\n          onReceived={this.handleReceivedChatroom}\r\n        >\r\n          <Cable\r\n            chatroom={this.props.chatroom}\r\n            handleReceivedMessage={this.handleReceivedMessage}\r\n          />\r\n        </ActionCableConsumer> */}\r\n        {/* ) : null} */}\r\n        {/* <h2>Chatrooms</h2> */}\r\n        {/* <ul>{mapChatrooms(chatrooms, this.handleClick)}</ul> */}\r\n        {/* <NewChatroomForm /> */}\r\n        {activeChatroom ? (\r\n           <ActionCableConsumer\r\n            key={activeChatroom.id}\r\n            // cable={actionCable.cable}\r\n            channel={{ channel: 'MessagesChannel', chatroom: activeChatroom.id }}\r\n            onReceived={(res) => {console.log(res); this.handleReceivedMessage(res)}}\r\n            // onInitialized= {(res) => console.log(res)}\r\n            // onConnected= {(res) => console.log(res)}\r\n            // onDisconnected= {(res) => console.log('disconnecting...',res)}\r\n            // onRejected= {(res) => console.log(res)}\r\n          />\r\n        ) : null}\r\n        {activeChatroom ? (\r\n          <MessagesArea\r\n            chatroom={activeChatroom}\r\n            user_id={this.props.user_id}\r\n            // findActiveChatroom(\r\n            //   chatrooms,\r\n            //   activeChatroom\r\n            // )\r\n          />\r\n        ) : null}\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default ChatroomList;\r\n\r\n// helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   return chatrooms.find(\r\n//     chatroom => {\r\n//       console.log(chatroom);\r\n//       console.log(activeChatroom);\r\n//       return chatroom.name === activeChatroom\r\n//     }\r\n//   );\r\n// };\r\n\r\nconst mapChatrooms = (chatrooms, handleClick) => {\r\n  return chatrooms.map(chatroom => {\r\n    return (\r\n      <li key={chatroom.name} onClick={() => handleClick(chatroom.name)}>\r\n        {chatroom.name}\r\n      </li>\r\n    );\r\n  });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from 'react';\r\n// import { ActionCable } from 'react-actioncable-provider';\r\n// import { API_ROOT } from './constants/index';\r\n// import NewChatroomForm from './NewChatroomForm';\r\n// import MessagesArea from './MessagesArea';\r\n// import Cable from './Cable';\r\n// import axios from 'axios';\r\n\r\n// class ChatroomsList extends React.Component {\r\n//   state = {\r\n//     // chatrooms: [],\r\n//     activeChatroom: {}//this.props.chatroom\r\n//   };\r\n\r\n//   componentWillMount = () => {\r\n//     const { chatroom } = this.props;\r\n//     if (!chatroom.messages) chatroom.messages = [];\r\n//     if (!chatroom.id) chatroom.id = 1;\r\n//     // this.setState({activeChatroom: chatroom});\r\n//   //   console.log('mounted', this.props);\r\n//     axios.get(`${API_ROOT}/chatrooms/${chatroom.id}`)\r\n//       .then(res => {\r\n//         console.log('res', res); \r\n//         this.setState({activeChatroom: res.data})\r\n//         // res\r\n//       })\r\n//       // .then(chatrooms => { console.log(chatrooms); this.setState({ chatrooms })});\r\n//   };\r\n\r\n//   // handleClick = id => {\r\n//   //   this.setState({ activeChatroom: id });\r\n//   // };\r\n\r\n//   // handleReceivedChatroom = response => {\r\n//   //   const { chatroom } = response;\r\n//   //   this.setState({\r\n//   //     chatrooms: [...this.state.chatrooms, chatroom]\r\n//   //   });\r\n//   // };\r\n\r\n//   handleReceivedMessage = response => {\r\n//     const { message } = response;\r\n//     const {activeChatroom} = this.state;\r\n//     // const chatrooms = [...this.state.chatrooms];\r\n//     // const chatroom = chatrooms.find(\r\n//     //   chatroom => chatroom.id === message.chatroom_id\r\n//     // );\r\n//     if (!activeChatroom.messages) activeChatroom.messages = [];\r\n//     // activeChatroom.messages.concat(message)\r\n//     activeChatroom.messages = [...activeChatroom.messages, message];\r\n//     this.setState({ activeChatroom });\r\n//   };\r\n\r\n//   render = () => {\r\n//     const { activeChatroom } = this.state;\r\n//     console.log(activeChatroom);\r\n//     return (\r\n//       <div className=\"ChatroomsList\">\r\n//         <h1>{activeChatroom.name}</h1>\r\n//         {activeChatroom ?\r\n//         <div>\r\n//           <ActionCable\r\n//             channel={{ channel: 'chatroom_channel' }}\r\n//           />\r\n//             <Cable\r\n//               chatroom={activeChatroom}\r\n//               handleReceivedMessage={this.handleReceivedMessage}\r\n//             />\r\n//           <h2>Chatrooms</h2>\r\n//           <ul>{mapchatrooms(chatrooms, this.handleClick)}</ul>\r\n//           <NewChatroomForm />\r\n//           {activeChatroom ? (\r\n//             <MessagesArea\r\n//               chatroom={activeChatroom}\r\n//               user_id={this.props.user_id}\r\n//             />\r\n//           ) : null}\r\n//           </div>\r\n//           : 'No Chats were found'}\r\n//       </div>\r\n//     );\r\n//   };\r\n// }\r\n\r\n// export default ChatroomsList;\r\n\r\n// // helpers\r\n\r\n// const findActiveChatroom = (chatrooms, activeChatroom) => {\r\n//   console.log('chatrooms', chatrooms)\r\n//   return chatrooms.find(\r\n//     chatroom => {console.log(chatroom.id, activeChatroom.id); return chatroom.id === 1}\r\n//   );\r\n// };\r\n\r\n// const mapchatrooms = (chatrooms, handleClick) => {\r\n//   return chatrooms.map(chatroom => {\r\n//     return (\r\n//       <li key={chatroom.id} onClick={() => handleClick(chatroom.id)}>\r\n//         {chatroom.name}\r\n//       </li>\r\n//     );\r\n//   });\r\n// };","/Users/colthafer/final-project/client_side-main/src/NewChatroomForm.js",[],"/Users/colthafer/final-project/client_side-main/src/Footer.js",[],"/Users/colthafer/final-project/client_side-main/src/Dummy.js",[],"/Users/colthafer/final-project/client_side-main/src/MessagesArea.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":8,"column":3,"nodeType":"87","messageId":"88","endLine":10,"endColumn":4},{"ruleId":"81","replacedBy":"89"},{"ruleId":"83","replacedBy":"90"},{"ruleId":"81","replacedBy":"91"},{"ruleId":"83","replacedBy":"92"},{"ruleId":"81","replacedBy":"93"},{"ruleId":"83","replacedBy":"94"},{"ruleId":"95","severity":1,"message":"96","line":3,"column":20,"nodeType":"97","messageId":"98","endLine":3,"endColumn":27},{"ruleId":"95","severity":1,"message":"99","line":3,"column":8,"nodeType":"97","messageId":"98","endLine":3,"endColumn":19},{"ruleId":"95","severity":1,"message":"100","line":4,"column":20,"nodeType":"97","messageId":"98","endLine":4,"endColumn":31},{"ruleId":"95","severity":1,"message":"101","line":5,"column":8,"nodeType":"97","messageId":"98","endLine":5,"endColumn":23},{"ruleId":"95","severity":1,"message":"102","line":7,"column":8,"nodeType":"97","messageId":"98","endLine":7,"endColumn":13},{"ruleId":"95","severity":1,"message":"103","line":67,"column":13,"nodeType":"97","messageId":"98","endLine":67,"endColumn":22},{"ruleId":"95","severity":1,"message":"104","line":150,"column":7,"nodeType":"97","messageId":"98","endLine":150,"endColumn":19},"no-native-reassign",["105"],"no-negated-in-lhs",["106"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["105"],["106"],["105"],["106"],["105"],["106"],"no-unused-vars","'HEADERS' is defined but never used.","Identifier","unusedVar","'ActionCable' is defined but never used.","'API_WS_ROOT' is defined but never used.","'NewChatroomForm' is defined but never used.","'Cable' is defined but never used.","'chatrooms' is assigned a value but never used.","'mapChatrooms' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]